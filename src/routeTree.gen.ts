/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RouterImport } from './routes/router'
import { Route as WarehouseWarehouseDashboardImport } from './routes/warehouse/warehouseDashboard'
import { Route as CustomerCustomerDashboardImport } from './routes/customer/customerDashboard'

// Create/Update Routes

const RouterRoute = RouterImport.update({
  id: '/router',
  path: '/router',
  getParentRoute: () => rootRoute,
} as any)

const WarehouseWarehouseDashboardRoute =
  WarehouseWarehouseDashboardImport.update({
    id: '/warehouse/warehouseDashboard',
    path: '/warehouse/warehouseDashboard',
    getParentRoute: () => rootRoute,
  } as any)

const CustomerCustomerDashboardRoute = CustomerCustomerDashboardImport.update({
  id: '/customer/customerDashboard',
  path: '/customer/customerDashboard',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/router': {
      id: '/router'
      path: '/router'
      fullPath: '/router'
      preLoaderRoute: typeof RouterImport
      parentRoute: typeof rootRoute
    }
    '/customer/customerDashboard': {
      id: '/customer/customerDashboard'
      path: '/customer/customerDashboard'
      fullPath: '/customer/customerDashboard'
      preLoaderRoute: typeof CustomerCustomerDashboardImport
      parentRoute: typeof rootRoute
    }
    '/warehouse/warehouseDashboard': {
      id: '/warehouse/warehouseDashboard'
      path: '/warehouse/warehouseDashboard'
      fullPath: '/warehouse/warehouseDashboard'
      preLoaderRoute: typeof WarehouseWarehouseDashboardImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/router': typeof RouterRoute
  '/customer/customerDashboard': typeof CustomerCustomerDashboardRoute
  '/warehouse/warehouseDashboard': typeof WarehouseWarehouseDashboardRoute
}

export interface FileRoutesByTo {
  '/router': typeof RouterRoute
  '/customer/customerDashboard': typeof CustomerCustomerDashboardRoute
  '/warehouse/warehouseDashboard': typeof WarehouseWarehouseDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/router': typeof RouterRoute
  '/customer/customerDashboard': typeof CustomerCustomerDashboardRoute
  '/warehouse/warehouseDashboard': typeof WarehouseWarehouseDashboardRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/router'
    | '/customer/customerDashboard'
    | '/warehouse/warehouseDashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/router'
    | '/customer/customerDashboard'
    | '/warehouse/warehouseDashboard'
  id:
    | '__root__'
    | '/router'
    | '/customer/customerDashboard'
    | '/warehouse/warehouseDashboard'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RouterRoute: typeof RouterRoute
  CustomerCustomerDashboardRoute: typeof CustomerCustomerDashboardRoute
  WarehouseWarehouseDashboardRoute: typeof WarehouseWarehouseDashboardRoute
}

const rootRouteChildren: RootRouteChildren = {
  RouterRoute: RouterRoute,
  CustomerCustomerDashboardRoute: CustomerCustomerDashboardRoute,
  WarehouseWarehouseDashboardRoute: WarehouseWarehouseDashboardRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/router",
        "/customer/customerDashboard",
        "/warehouse/warehouseDashboard"
      ]
    },
    "/router": {
      "filePath": "router.ts"
    },
    "/customer/customerDashboard": {
      "filePath": "customer/customerDashboard.tsx"
    },
    "/warehouse/warehouseDashboard": {
      "filePath": "warehouse/warehouseDashboard.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
